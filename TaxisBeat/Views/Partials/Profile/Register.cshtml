@using Umbraco.Web
@using TaxisBeat.Code
@model RegisterModel
<div id="register-form-wrapper">
    @using (Html.BeginUmbracoForm<AuthSurfaceController>("Register", null, new { @class = "register-form", @id = "register-form" }, FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        @Html.HiddenFor(z => z.Cpid)
        @Html.HiddenFor(z => z.TermsAndConditionsUrl)
        if (!Model.MemberCreated)
        {
            <div class="col_half">
                @Html.LabelFor(m => m.Name)
                @Html.TextBoxFor(m => m.Name, new { @class = "sm-form-control" })
                @Html.ValidationMessageFor(m => m.Name)
            </div>
            <div class="col_half col_last">
                @Html.LabelFor(m => m.Surname)
                @Html.TextBoxFor(m => m.Surname, new { @class = "sm-form-control" })
                @Html.ValidationMessageFor(m => m.Surname)
            </div>
            <div class="col_half">
                @Html.LabelFor(m => m.Username)
                @Html.TextBoxFor(m => m.Username, new { @class = "sm-form-control" })
                @Html.ValidationMessageFor(m => m.Username)
            </div>
            <div class="col_half col_last">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, new { @class = "sm-form-control", @id = "js-register-email" })
                @Html.ValidationMessageFor(m => m.Email)
            </div>
            <div class="clearfix"></div>
            <div class="col_half">
                @Html.LabelFor(m => m.Password)
                @Html.PasswordFor(m => m.Password, new { @class = "sm-form-control", @id = "js-registerform-password" })
                @Html.ValidationMessageFor(m => m.Password)
            </div>
            <div class="col_half col_last">
                @Html.LabelFor(m => m.ConfirmPassword)
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "sm-form-control", @id = "js-registerconfirmpass" })
                @Html.ValidationMessageFor(m => m.ConfirmPassword)
            </div>
            <div class="col_full">
                <label class="checkbox">
                    @Html.EditorFor(m => m.AcceptedTerms)
                    @Html.Raw("Αποδέχομαι τους <a href={TermsAndConditionsUrl} target=\"_blank\">Όρους & Προυποθέσεις</a>."
                                       .Format2(new
                                       {
                                           TermsAndConditionsUrl = Model.TermsAndConditionsUrl
                                       }))
                </label>
                @Html.ValidationMessageFor(m => m.AcceptedTerms, null, new { @style = "display: block;" })
            </div>
            <div class="clearfix"></div>
            <div class="col_full registration-btn center">
                <button class="button button-3d button-torch-red button-long" id="register-form-submit">Εγγραφή</button>
            </div>
            <hr />
            <div class="col_full col_last center nobottommargin nobottompadding">
                <div class="col_half">
                    <h4>Ή εγγραφή μέσω</h4>
                </div>
                <div class="col_half col_last">
                    <a class="button button-rounded si-facebook si-colored" id="js-register-with-facebook">Facebook</a>
                </div>
            </div>

        }
        else
        {
            <div class="col_full center topmargin-sm">
                <span class="text-success col_full notopmargin" style="display:inline-block;">Ο λογαριασμός σας έχει δημιουργηθεί με επιτυχία. Για να εισέλθετε επιβεβαιώστε πρώτα το email σας.</span>
                <button class="button button-3d nomargin" data-dismiss="modal" id="js-member-created">Ευχαριστούμε!</button>
            </div>
        }
        if (!ViewData.ModelState.IsValid)
        {
            ModelState error;
            ViewData.ModelState.TryGetValue("FormGenericError", out error);
            if (error != null)
            {
                <div class="col_full topmargin-sm nobottommargin">
                    @foreach (var e in error.Errors)
                    {
                        <span class="text-danger" style="color:#ff0042; font-weight:400;">@e.ErrorMessage</span>
                    }
                </div>
            }
        }
        <div class="clearfix"></div>

    }
</div>
